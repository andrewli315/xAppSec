#!/bin/bash


help() {
    echo "xAppSec Usage:"
    echo "./xAppSec [OPTIONS]"
    echo ""
    echo "[OPTIONS]"
    echo "-w : Update registry whitelist for image scanner"
    echo "-c : Check docker images security"
    echo "-h : Help"
}


if [ $1 != "-w" ] && [ $1 != "-c" ]; then 
    help
    exit
fi

# Setup whiteList
if [ $1 == "-w" ]; then
    echo $2
    exit

elif [ $1 == "-h" ]; then
    help 
elif [ $1 == "-c" ]; then  

    # get config.json and schema.json
    
    CONFIG_JSON=$2
    SCHEMA_JSON=$3

    echo "Retrieving docker images used by xApp"
    CONTAINER_NUM=$(cat  ${CONFIG_JSON}  | jq -c ".containers" | jq length)
    XAPP_NAME=$(cat ${CONFIG_JSON} | jq -c ".xapp_name" )
    INDEX=0
    CHECK=0
    while [ $INDEX -lt $CONTAINER_NUM ] 
    do
        REGISTRY=$(cat  ${CONFIG_JSON}  | jq -c ".containers[$INDEX].image.registry"| tr -d '"')
        NAME=$(cat  ${CONFIG_JSON}  | jq -c ".containers[$INDEX].image.name"| tr -d '"')
        TAG=$(cat  ${CONFIG_JSON}  | jq -c ".containers[$INDEX].image.tag" | tr -d '"')
    	echo $REGISTRY
	    echo $NAME
    	echo $TAG
        echo "Checking $REGISTRY/$NAME:$TAG  exists or not ...."
        ret=$(docker image inspect $REGISTRY/$NAME:$TAG)
        if [ "$ret" = "[]" ]; then
            echo "No such Image"
            echo "Pulling $REGISTRY/$NAME:$TAG ..."
    	    docker pull "$REGISTRY/$NAME:$TAG"        
        fi
        echo ">>> Checking Registry Source ... "
        ret=$(python3 Image_Security_Module/ImageRegistryCheck.py registry-check $NAME)

        if [ ret == "False" ]; then
            echo "Registry is not Valid"
            echo "Do not onboard and install this xApp"
            echo "Do not use this Docker image for any purpose"
            exit 1 
        fi
        echo ">>> Scanning If Backdoors Within Image ... "
        ret=$(python3 Image_Security_Module/backdoor_scan.py xapp-scan-images $NAME)
        if [ ret == "False" ]; then
            echo "Dockerfile contains backdoor"
            echo "Do not onboard and install this xApp"
            echo "Do not use this Docker image for any purpose"
            exit 1 
        fi
        
        echo ">>> Scanning History Instructions in the Image...."
        ret=$(python3 Image_Security_Module/image_history.py xapp-scan-images $NAME)
        if [ ret == "False" ]; then
            echo "This Dockerfile contains abnormal history instructions"
            echo "Do not onboard and install this xApp"
            echo "Do not use this Docker image for any purpose"
            exit 1 
        fi
        (( INDEX++ ))
    done
    # if pass check, onboarding xApp    
    dms_cli onboard $CONFIG_JSON $SCHEMA_JSON

    # if pass check, install xApp
    if [ -z $4 ]; then 
        echo "No need to install xApp"
        exit
    elif [ $4 == "-i" ]; then
        if [ -z $5 ]; then
            echo "NO specify namespace for xApp"
            exit 1
        else
            echo ">>> Installing xApp ..."
            dms_cli install $CONFIG_JSON $SCHEMA_JSON $5
        fi
    fi


    sleep 15

    XAPP_NUM=$(kubectl get pods -n ricxapp -o json | jq -c ".items" | jq length)
    ret=0
    for (( i=0; i <=XAPP_NUM; i++ ))
    do 
        name=$(kubectl get pods -n ricxapp -o json | jq -c ".items[$i]" | jq -c ".metadata.labels.app")
        if [ $name == $XAPP_NAME ]; then
            ret=1
            break
        fi

    done
    if [ ret == 0 ]; then 
        echo "Failed to install xApp"
        echo "Please check the environment or configuration file"
        exit 1
    else
        echo "Successfully install the xApp $XAPP_NAME"
        exit 
    fi
# if -h or else options, print help
else
    help 
fi

